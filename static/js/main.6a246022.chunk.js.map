{"version":3,"sources":["types/actionTypes.ts","redux/reducers/todos.ts","components/TodoList/TodoList.tsx","redux/reducers/index.ts","redux/store.ts","redux/actions/todos.ts","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionTypes","Completed","initialState","selectedUser","todos","todosList","state","action","type","SET_TODOS","payload","SELECT_USER","userId","DELETE_TODO","filter","item","id","todoId","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","setSelectedUser","TodoList","dispatch","useDispatch","useSelector","useState","search","setSearch","all","completed","setCompleted","filteredTodos","setFilteredTodos","deleteTodoHandler","deleteTodo","useEffect","isSearch","title","includes","active","className","placeholder","value","onChange","e","target","onClick","sort","Math","random","length","map","todo","classnames","readOnly","request","url","fetch","then","resp","json","CurrentUser","selectedUserId","userDetail","setUserDetail","data","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a246022.chunk.js","sourcesContent":["export enum ActionTypes {\n  SET_TODOS = 'SET_TODOS',\n  SELECT_USER = 'SELECT_USER',\n  DELETE_TODO = 'DELETE_TODO',\n}\n","import { Todo } from '../../types/Todo';\nimport {\n  ActionDeleteTodo,\n  ActionSetCurrentUser,\n  ActionSetTodos,\n} from '../actions/todos';\nimport { ActionTypes } from '../../types/actionTypes';\n\nconst initialState = {\n  selectedUser: null,\n  todos: [],\n};\n\nconst todosList = (\n  state = initialState,\n  action: ActionSetTodos | ActionSetCurrentUser | ActionDeleteTodo,\n) => {\n  switch (action.type) {\n    case ActionTypes.SET_TODOS: {\n      return {\n        ...state,\n        todos: action.payload.todos,\n      };\n    }\n\n    case ActionTypes.SELECT_USER: {\n      return {\n        ...state,\n        selectedUser: action.payload.userId,\n      };\n    }\n\n    case ActionTypes.DELETE_TODO: {\n      return {\n        ...state,\n        todos: state.todos.filter((item: Todo) => (\n          item.id !== action.payload.todoId\n        )),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default todosList;\n","import React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { setSelectedUser, deleteTodo } from '../../redux/actions/todos';\n\nenum Completed {\n  all = 'All',\n  active = 'Active',\n  completed = 'Completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todosList.todos);\n  const selectedUser = useSelector((state: RootState) => (\n    state.todosList.selectedUser\n  ));\n\n  const [search, setSearch] = useState<string>('');\n  const [completed, setCompleted] = useState<Completed | string>(Completed.all);\n  const [filteredTodos, setFilteredTodos] = useState(todos);\n\n  const selectUser = (userId: number) => {\n    if (selectedUser !== userId) {\n      dispatch(setSelectedUser(userId));\n    }\n  };\n\n  const deleteTodoHandler = (todoId: number) => {\n    dispatch(deleteTodo(todoId));\n  };\n\n  useEffect(() => {\n    setFilteredTodos(todos.filter(item => {\n      const isSearch = item.title.includes(search);\n\n      switch (completed) {\n        case Completed.active:\n          return !item.completed && isSearch;\n\n        case Completed.completed:\n          return item.completed && isSearch;\n\n        case Completed.all:\n        default:\n          return isSearch;\n      }\n    }));\n  }, [search, completed, todos]);\n\n  const randomOrder = () => {\n    return setFilteredTodos(\n      [...filteredTodos].sort(() => Math.random() - 0.5),\n    );\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <div className=\"TodoList__nav\">\n          <input\n            type=\"search\"\n            className=\"TodoList__search\"\n            placeholder=\"Search todo\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <select\n            className=\"TodoList__select\"\n            value={completed}\n            onChange={(e) => setCompleted(e.target.value)}\n          >\n            <option value={Completed.all}>\n              {Completed.all}\n            </option>\n            <option value={Completed.active}>\n              {Completed.active}\n            </option>\n            <option value={Completed.completed}>\n              {Completed.completed}\n            </option>\n          </select>\n          <button\n            type=\"button\"\n            className=\"TodoList__random button\"\n            onClick={() => randomOrder()}\n          >\n            Random\n          </button>\n        </div>\n        <ul className=\"TodoList__list\">\n          {filteredTodos.length > 0 && (\n            filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classnames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': todo.completed === false },\n                  { 'TodoList__item--checked': todo.completed === true },\n                )}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <div className=\"TodoList__buttons\">\n                  <button\n                    className={classnames(\n                      'TodoList__user-button',\n                      'button',\n                      {\n                        'TodoList__user-button--selected':\n                        todo.userId === selectedUser,\n                      },\n                    )}\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                  <button\n                    className=\"TodoList__user-button_delete button\"\n                    type=\"button\"\n                    onClick={() => deleteTodoHandler(todo.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </li>\n            ))\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { combineReducers } from 'redux';\nimport todosList from './todos';\n\nconst rootReducer = combineReducers({\n  todosList,\n});\n\nexport default rootReducer;\n","import { createStore, compose } from 'redux';\nimport { Todo } from '../types/Todo';\nimport rootReducer from './reducers';\n\nexport interface RootState {\n  todosList: {\n    selectedUser: number | null,\n    todos: Todo[],\n  }\n}\n\n// eslint-disable-next-line\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(),\n);\n\nexport default store;\n","import { Todo } from '../../types/Todo';\nimport { ActionTypes } from '../../types/actionTypes';\n\nexport interface ActionSetTodos {\n  type: ActionTypes.SET_TODOS;\n  payload: {\n    todos: Todo[],\n  };\n}\n\nexport interface ActionSetCurrentUser {\n  type: ActionTypes.SELECT_USER;\n  payload: {\n    userId: number | null;\n  };\n}\n\nexport interface ActionDeleteTodo {\n  type: ActionTypes.DELETE_TODO;\n  payload: {\n    todoId: number;\n  };\n}\n\nexport const setTodos = (todos: Todo[]) => ({\n  type: ActionTypes.SET_TODOS,\n  payload: {\n    todos,\n  },\n});\n\nexport const setSelectedUser = (userId: number | null) => ({\n  type: ActionTypes.SELECT_USER,\n  payload: {\n    userId,\n  },\n});\n\nexport const deleteTodo = (todoId: number) => ({\n  type: ActionTypes.DELETE_TODO,\n  payload: {\n    todoId,\n  },\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => fetch(`${BASE_URL}${url}`)\n  .then(resp => resp.json());\n\nexport const getTodos = () => request('/todos');\n\nexport const getUserDetails = (userId: number | null) => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserDetails } from '../../api/api';\nimport { setSelectedUser } from '../../redux/actions/todos';\nimport { RootState } from '../../redux/store';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector((state: RootState) => (\n    state.todosList.selectedUser\n  ));\n  const [userDetail, setUserDetail] = useState<User>();\n\n  useEffect(() => {\n    getUserDetails(selectedUserId)\n      .then((data) => setUserDetail(data));\n  }, [selectedUserId]);\n\n  const removeSelectedUser = () => {\n    dispatch(setSelectedUser(null));\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      {userDetail && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${userDetail.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {userDetail.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {userDetail.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {userDetail.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear button\"\n            onClick={() => removeSelectedUser()}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setTodos } from './redux/actions/todos';\nimport { RootState } from './redux/store';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const selectedUserId = useSelector((state: RootState) => (\n    state.todosList.selectedUser\n  ));\n\n  useEffect(() => {\n    getTodos()\n      .then((data) => dispatch(setTodos(data)));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './redux/store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}