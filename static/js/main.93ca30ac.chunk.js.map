{"version":3,"sources":["redux/reducers/todos/types.ts","redux/reducers/todos/todos.ts","components/TodoList/TodoList.tsx","redux/reducers/index.ts","redux/store.ts","redux/reducers/todos/action-creators.ts","redux/reducers/todos/selectors.ts","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionTypes","Completed","initialState","selectedUser","todos","todosList","state","action","type","SET_TODOS","payload","SELECT_USER","DELETE_TODO","filter","item","id","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","TodosActionCreators","userId","todoId","allTodos","TodoList","dispatch","useDispatch","useSelector","selectedUserId","useState","search","setSearch","all","completed","setCompleted","filteredTodos","setFilteredTodos","useEffect","isSearch","title","includes","active","className","placeholder","value","onChange","e","target","onClick","sort","Math","random","length","map","todo","classnames","readOnly","request","url","fetch","then","resp","json","CurrentUser","userDetail","setUserDetail","data","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93ca30ac.chunk.js","sourcesContent":["import { Todo } from '../../../types/Todo';\n\nexport enum ActionTypes {\n  SET_TODOS = 'SET_TODOS',\n  SELECT_USER = 'SELECT_USER',\n  DELETE_TODO = 'DELETE_TODO',\n}\n\nexport interface SetTodosAction {\n  type: ActionTypes.SET_TODOS;\n  payload: Todo[];\n}\n\nexport interface SetCurrentUserAction {\n  type: ActionTypes.SELECT_USER;\n  payload: number | null;\n}\n\nexport interface DeleteTodoAction {\n  type: ActionTypes.DELETE_TODO;\n  payload: number;\n}\n\nexport type AuthAction =\n  SetTodosAction |\n  SetCurrentUserAction |\n  DeleteTodoAction;\n","import { Todo } from '../../../types/Todo';\nimport { ActionTypes, AuthAction } from './types';\n\nconst initialState = {\n  selectedUser: null,\n  todos: [],\n};\n\nconst todosList = (state = initialState, action: AuthAction) => {\n  switch (action.type) {\n    case ActionTypes.SET_TODOS: {\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    }\n\n    case ActionTypes.SELECT_USER: {\n      return {\n        ...state,\n        selectedUser: action.payload,\n      };\n    }\n\n    case ActionTypes.DELETE_TODO: {\n      return {\n        ...state,\n        todos: state.todos.filter((item: Todo) => (\n          item.id !== action.payload\n        )),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default todosList;\n","import React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { allTodos, selectedUser } from '../../redux/reducers/todos/selectors';\nimport { TodosActionCreators }\n  from '../../redux/reducers/todos/action-creators';\nimport './TodoList.scss';\n\nenum Completed {\n  all = 'All',\n  active = 'Active',\n  completed = 'Completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(allTodos);\n  const selectedUserId = useSelector(selectedUser);\n\n  const [search, setSearch] = useState<string>('');\n  const [completed, setCompleted] = useState<Completed | string>(Completed.all);\n  const [filteredTodos, setFilteredTodos] = useState(todos);\n\n  const selectUser = (userId: number) => {\n    if (selectedUserId !== userId) {\n      dispatch(TodosActionCreators.setSelectedUser(userId));\n    }\n  };\n\n  const deleteTodoHandler = (todoId: number) => {\n    dispatch(TodosActionCreators.deleteTodo(todoId));\n  };\n\n  useEffect(() => {\n    setFilteredTodos(todos.filter(item => {\n      const isSearch = item.title.includes(search);\n\n      switch (completed) {\n        case Completed.active:\n          return !item.completed && isSearch;\n\n        case Completed.completed:\n          return item.completed && isSearch;\n\n        case Completed.all:\n        default:\n          return isSearch;\n      }\n    }));\n  }, [search, completed, todos]);\n\n  const randomOrder = () => {\n    return setFilteredTodos(\n      [...filteredTodos].sort(() => Math.random() - 0.5),\n    );\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <div className=\"TodoList__nav\">\n          <input\n            type=\"search\"\n            className=\"TodoList__search\"\n            placeholder=\"Search todo\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <select\n            className=\"TodoList__select\"\n            value={completed}\n            onChange={(e) => setCompleted(e.target.value)}\n          >\n            <option value={Completed.all}>\n              {Completed.all}\n            </option>\n            <option value={Completed.active}>\n              {Completed.active}\n            </option>\n            <option value={Completed.completed}>\n              {Completed.completed}\n            </option>\n          </select>\n          <button\n            type=\"button\"\n            className=\"TodoList__random button\"\n            onClick={() => randomOrder()}\n          >\n            Random\n          </button>\n        </div>\n        <ul className=\"TodoList__list\">\n          {filteredTodos.length > 0 && (\n            filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classnames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': todo.completed === false },\n                  { 'TodoList__item--checked': todo.completed === true },\n                )}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <div className=\"TodoList__buttons\">\n                  <button\n                    className={classnames(\n                      'TodoList__user-button',\n                      'button',\n                      {\n                        'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                      },\n                    )}\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                  <button\n                    className=\"TodoList__user-button_delete button\"\n                    type=\"button\"\n                    onClick={() => deleteTodoHandler(todo.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </li>\n            ))\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { combineReducers } from 'redux';\nimport todosList from './todos/todos';\n\nconst rootReducer = combineReducers({\n  todosList,\n});\n\nexport default rootReducer;\n","import { createStore, compose } from 'redux';\nimport { Todo } from '../types/Todo';\nimport rootReducer from './reducers';\n\nexport interface RootState {\n  todosList: {\n    selectedUser: number | null,\n    todos: Todo[],\n  }\n}\n\n// eslint-disable-next-line\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(),\n);\n\nexport default store;\n","import { Todo } from '../../../types/Todo';\nimport {\n  ActionTypes,\n  SetTodosAction,\n  SetCurrentUserAction,\n  DeleteTodoAction,\n} from './types';\n\nexport const TodosActionCreators = {\n  setTodos: (todos: Todo[]): SetTodosAction => ({\n    type: ActionTypes.SET_TODOS,\n    payload: todos,\n  }),\n\n  setSelectedUser: (userId: number | null): SetCurrentUserAction => ({\n    type: ActionTypes.SELECT_USER,\n    payload: userId,\n  }),\n\n  deleteTodo: (todoId: number): DeleteTodoAction => ({\n    type: ActionTypes.DELETE_TODO,\n    payload: todoId,\n  }),\n};\n","import { RootState } from '../../store';\n\nexport const selectedUser = (state: RootState) => (\n  state.todosList.selectedUser\n);\n\nexport const allTodos = (state: RootState) => state.todosList.todos;\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => fetch(`${BASE_URL}${url}`)\n  .then(resp => resp.json());\n\nexport const getTodos = () => request('/todos');\n\nexport const getUserDetails = (userId: number | null) => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserDetails } from '../../api/api';\nimport { selectedUser } from '../../redux/reducers/todos/selectors';\nimport { TodosActionCreators }\n  from '../../redux/reducers/todos/action-creators';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(selectedUser);\n  const [userDetail, setUserDetail] = useState<User>();\n\n  useEffect(() => {\n    getUserDetails(selectedUserId)\n      .then((data) => setUserDetail(data));\n  }, [selectedUserId]);\n\n  const removeSelectedUser = () => {\n    dispatch(TodosActionCreators.setSelectedUser(null));\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      {userDetail && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${userDetail.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {userDetail.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {userDetail.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {userDetail.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear button\"\n            onClick={() => removeSelectedUser()}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TodosActionCreators } from './redux/reducers/todos/action-creators';\nimport { selectedUser } from './redux/reducers/todos/selectors';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(selectedUser);\n\n  useEffect(() => {\n    getTodos()\n      .then((data) => dispatch(TodosActionCreators.setTodos(data)));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './redux/store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}